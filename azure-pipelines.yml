# Android
# Build your Android project with Gradle.
# Add steps that test, sign, and distribute the APK, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/android

trigger:
- master

pool:
  vmImage: 'macos-latest'

steps:
- task: Gradle@2
  inputs:
    workingDirectory: 'Repairs'
    gradleWrapperFile: 'Repairs/gradlew'
    gradleOptions: '-Xmx3072m'
    publishJUnitResults: false
    testResultsFiles: '**/TEST-*.xml'
    tasks: 'assembleDebug'
- task: Gradle@2
  inputs:
    workingDirectory: 'Repairs'
    gradleWrapperFile: 'Repairs/gradlew'
    gradleOptions: '-Xmx3072m'
    publishJUnitResults: true
    testResultsFiles: '**/TEST-*.xml'
    tasks: 'testDebugUnitTest'
- task: Bash@3
  inputs:
    script: 'echo "y" | $ANDROID_HOME/tools/bin/sdkmanager --install 'system-images;android-27;google_apis;x86'
echo "no" | $ANDROID_HOME/tools/bin/avdmanager create avd -n xamarin_android_emulator -k 'system-images;android-27;google_apis;x86' --force
$ANDROID_HOME/emulator/emulator -list-avds
echo "Starting emulator"
nohup $ANDROID_HOME/emulator/emulator -avd xamarin_android_emulator -no-snapshot > /dev/null 2>&1 &
$ANDROID_HOME/platform-tools/adb wait-for-device shell 'while [[ -z $(getprop sys.boot_completed | tr -d '\r') ]]; do sleep 1; done; input keyevent 82'
$ANDROID_HOME/platform-tools/adb devices
echo "Emulator started"'
- task: Gradle@2
  inputs:
    workingDirectory: 'Repairs'
    gradleWrapperFile: 'Repairs/gradlew'
    gradleOptions: '-Xmx3072m'
    publishJUnitResults: false
    testResultsFiles: '**/TEST-*.xml'
    tasks: 'jacocoTestReport'
- task: PublishCodeCoverageResults@1
  inputs:
    summaryFileLocation: '**/jacocoTestReport.xml'
    pathToSources: 'Repairs'
    failIfCoverageEmpty: true
- task: CopyFiles@2
  inputs:
    contents: '**/app-debug.apk'
    targetFolder: '$(build.artifactStagingDirectory)'


- task: PublishBuildArtifacts@1
